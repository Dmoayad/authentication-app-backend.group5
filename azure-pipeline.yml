trigger:
  branches:
    include:
      - main

variables:
  dockerRegistryServiceConnection: 'dockerhub_connection'
  imageRepository: 'dmoayad/authentication_app_backend'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  containerRegistry: 'dmoayad/authentication_app_backend'
  kubernetesServiceConnection: 'azurerm-connection'
  k8sNamespace: 'auth-app'
  sonarQubeServiceConnection: 'SonarQube-Service'
  sonarProjectKey: 'project3-group5'

stages:

# ------------------ CI Stage ------------------
- stage: CI
  displayName: 'Build, Scan, Push Docker Image'
  jobs:
    - job: BuildAndScan
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - task: NodeTool@0
          inputs:
            versionSpec: "$(nodeVersion)"
          displayName: "Use Node.js $(nodeVersion)"

        - task: SonarQubePrepare@7
          inputs:
            SonarQube: "$(sonarqube_service_connection)"
            scannerMode: "CLI"
            configMode: "manual"
            cliProjectKey: "$(appName)"
            cliProjectName: "Backend Node App"
            cliSources: "."
          displayName: "Prepare SonarQube Analysis"

        - script: |
            npm install
          displayName: "Install Dependencies"

        - task: SonarQubeAnalyze@7
          displayName: "Run SonarQube Analysis"

        - script: |
            npm test
          displayName: "Run Tests"

        - task: PublishTestResults@2
          inputs:
            testResultsFormat: "JUnit"
            testResultsFiles: "test-results/test-results.xml"
          condition: succeededOrFailed()
          displayName: "Publish Test Results"

        - task: SonarQubePublish@7
          inputs:
            pollingTimeoutSec: "300"
          displayName: "Publish SonarQube Results"

        # Step 2: Docker Build
        - task: Docker@2
          displayName: 'Build Docker Image'
          inputs:
            command: build
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(imageRepository)
            dockerfile: $(dockerfilePath)
            tags: |
              $(tag)
              latest

        # Step 3: Run SonarQube Analysis
        - task: SonarQubeAnalyze@5

        # Step 3.5: Wait before publishing
        - script: sleep 30
          displayName: 'Wait for SonarQube to process results'

        # Step 4: Publish SonarQube Results
        - task: SonarQubePublish@5
          inputs:
            pollingTimeoutSec: '300'

        # Step 5: Docker Push
        - task: Docker@2
          displayName: 'Push Docker Image'
          inputs:
            command: push
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(imageRepository)
            tags: |
              $(tag)
              latest

# ------------------ CD Stage ------------------
- stage: CD
  displayName: 'Deploy to AKS'
  dependsOn: CI
  jobs:
    - job: DeployToAKS
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - task: Kubernetes@1
          displayName: 'Deploy to AKS'
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscriptionEndpoint: $(kubernetesServiceConnection)
            azureResourceGroup: 'devops2-group5-rg'
            kubernetesCluster: 'devops2-group5-aks'
            namespace: $(k8sNamespace)
            command: 'apply'
            arguments: '-f k8s/backend_clusterip.yml -f k8s/backend_deploy.yml -f k8s/backend_ingress.yml -f k8s/namespace.yml'
