trigger:
  branches:
    include:
      - main

variables:
  dockerRegistryServiceConnection: 'dockerhub_connection'
  imageRepository: 'dmoayad/authentication_app_backend'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  containerRegistry: 'dmoayad/authentication_app_backend'
  kubernetesServiceConnection: 'azurerm-connection'
  k8sNamespace: 'auth-app'
  sonarQubeServiceConnection: 'SonarQube-Service'  
  sonarProjectKey: 'project3-group5'

stages:

# ------------------ CI Stage ------------------
- stage: CI
  displayName: 'Build, Scan, Push Docker Image'
  jobs:
    - job: BuildAndScan
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        # Step 1: Install sonar-scanner
        - script: |
            sudo apt-get update
            sudo apt-get install -y unzip
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
            unzip sonar-scanner-cli-5.0.1.3006-linux.zip
            mv sonar-scanner-5.0.1.3006-linux sonar-scanner
            export PATH=$PATH:$(pwd)/sonar-scanner/bin
            sonar-scanner \
              -Dsonar.projectKey=project3-group5 \
              -Dsonar.sources=. \
              -Dsonar.host.url=http://128.203.85.110:9000 \
              -Dsonar.token=sqp_2edd489d7fa9c05aba50aa8b45b8d353d6824407
          displayName: 'Run SonarQube Scanner'

        # Step 2: Docker Build
        - task: Docker@2
          displayName: 'Build Docker Image'
          inputs:
            command: build
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(imageRepository)
            dockerfile: $(dockerfilePath)
            tags: |
              $(tag)
              latest

        # Step 3: Docker Push
        - task: Docker@2
          displayName: 'Push Docker Image'
          inputs:
            command: push
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(imageRepository)
            tags: |
              $(tag)
              latest

# ------------------ CD Stage ------------------
- stage: CD
  displayName: 'Deploy to AKS'
  dependsOn: CI
  jobs:
    - job: DeployToAKS
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - task: Kubernetes@1
          displayName: 'Deploy to AKS'
          inputs:
            connectionType: 'Azure Resource Manager'
            azureSubscriptionEndpoint: $(kubernetesServiceConnection)
            azureResourceGroup: 'devops2-group5-rg'
            kubernetesCluster: 'devops2-group5-aks'
            namespace: $(k8sNamespace)
            command: 'apply'
            arguments: '-f k8s/backend_clusterip.yml -f k8s/backend_deploy.yml -f k8s/backend_ingress.yml -f k8s/namespace.yml'


